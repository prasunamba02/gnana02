#sum of nodes


sum=0
class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data,end=" ")
            self.inorder_traversal(Node.right)
    def sum_of_nodes(self,Node):
        if Node is None:
            return 0
        return Node.data+self.sum_of_nodes(Node.left)+self.sum_of_nodes(Node.right)
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
print("Inorder traversal: ")
tree.inorder_traversal(Node=tree)
print("\n")
print("The sum of nodes of left subtree is : ")
print(tree.sum_of_nodes(Node=tree.left))
print("The sum of nodes of right subtree is : ")
print(tree.sum_of_nodes(Node=tree.right))
print("The sum of nodes is : ")
print(tree.sum_of_nodes(Node=tree))


o/p:

Inorder traversal: 
4 2 5 1 6 3 7 

The sum of nodes of left subtree is : 
11
The sum of nodes of right subtree is : 
16
The sum of nodes is : 
28






sum=0
class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
    def sum_of_nodes(self,Node):
        if Node is None:    #this is base case means when to stop
            return 0
        return Node.data+self.sum_of_nodes(Node.left)+self.sum_of_nodes(Node.right)
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
print(tree.data)#root node
print(tree.left.data)#left child
print(tree.right.data)
print(tree.left.left.data)
print(tree.left.right.data)
print(tree.right.left.data)
print(tree.right.right.data)
print("\n")
print("The sum of nodes is : ")
print(tree.sum_of_nodes(Node=tree))


o/p:


1
2
3
4
5
6
7


The sum of nodes is : 
28
