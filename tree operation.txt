class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data)
            self.inorder_traversal(Node.right)
    def preorder_traversal(self,Node):
        if Node:
            print(Node.data)
            self.preorder_traversal(Node.left)
            self.preorder_traversal(Node.right)
    def postorder_traversal(self,Node):
        if Node:
            self.postorder_traversal(Node.left)
            self.postorder_traversal(Node.right)
            print(Node.data)
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
print(tree.data)#root node
print(tree.left.data)#left child
print(tree.right.data)
print(tree.left.left.data)
print(tree.left.right.data)
print(tree.right.left.data)
print(tree.right.right.data)
print("\n")
#right child
print(tree.inorder_traversal(Node=tree))
print("\n")
print(tree.preorder_traversal(Node=tree))
print("\n")
print(tree.postorder_traversal(Node=tree))


o/p:


1
2
3
4
5
6
7
inorder traversal
4
2
5
1
6
3
7
None

preorder traversal
1
2
4
5
3
6
7
None
#postorder traversal

4
5
2
6
7
3
1
None