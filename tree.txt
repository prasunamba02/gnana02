



class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3#inserting data at right child
print(tree.data)#root node
print(tree.left.data)#left child
print(tree.right.data)#right child

o/p:
1
2
3







    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
print(tree.data)#root node
print(tree.left.data)#left child
print(tree.right.data)
print(tree.left.left.data)
print(tree.left.right.data)
print(tree.right.left.data)
print(tree.right.right.data)
#right child


o/p:
1
2
3
4
5
6
7





#inorder
class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data,end=" ")
            self.inorder_traversal(Node.right)
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
print(tree.inorder_traversal(Node=tree))


o/p:
4 2 5 1 6 3 7 None


# inorder
class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data,end=" ")
            self.inorder_traversal(Node.right)
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
tree.inorder_traversal(Node=tree)#remove the print word then none will not come 

o/p:
4 2 5 1 6 3 7 



class Node:
    def __init__(self):
        self.left=None
        self.right=None
        self.data=None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data,end=" ")
            self.inorder_traversal(Node.right)
tree=Node()
tree.data=1 #root node
tree.left=Node()#creating new node for left child
tree.left.data=2#inserting data at left child
tree.right=Node()#creating new node for right child
tree.right.data=3
tree.left.left=Node()
tree.left.left.data=4
tree.left.right=Node()
tree.left.right.data=5
tree.right.left=Node()
tree.right.left.data=6
tree.right.right=Node()
tree.right.right.data=7
print("Inorder traversal: ")
tree.inorder_traversal(Node=tree)



o/p:

Inorder traversal: 
4 2 5 1 6 3 7 





#===============================================================================


